
@function spanColumns($cols) {
	@return  percentage(1/$cols);
}

@function em($pixels, $context: $base-font-size) {
	@return #{$pixels/$context}em;
}

@mixin breakpoint($breakpoint, $type: min) {
	// Get the width from the keyword `$breakpoint`
	// Or `null` if the keyword doesn't exist in `$breakpoints` map
	$value: map-get($breakpoints, $breakpoint);
	$direction: map-get($breakpoint-directions, $type);

	// If `$breakpoint` exists as a key in `$breakpoints`
	@if $value != null {

		// If '$type' exists as a key in '$breakpoint-directions'
		@if $direction != null {
			// Update `$current-breakpoint`
			$current-breakpoint: $breakpoint !global;
			// Open a media query block
			@media (#{$direction}: $value) {
				// Let the user dump content
				@content;
			}
			// Then reset `$current-breakpoint` to `$default-breakpoint` (root)
			$current-breakpoint: $default-breakpoint !global;
		}
		@else {
			@warn "Invalid breakpoint direction `#{$type}`.";
		}
	}

		// If `$breakpoint` doesn't exist in `$breakpoints`,
		// Warn the user and do nothing
	@else {
		@warn "Invalid breakpoint `#{$breakpoint}`.";
	}

}

// Aspect Ratio
@mixin aspectRatio($x, $y, $innerSelector) {
	position: relative;
	&:after {
			padding-top: percentage( $y / $x );
			display: block;
			content: '';
	}
	> #{$innerSelector} {
		position: absolute;
		top: 0;
		left: 0;
		height: 100%;
		width: 100%;
	}
}

// BG Cover
@mixin bgCover {
		background-repeat: no-repeat;
		background-position: 50% 50%;
		background-size: cover;
}

@mixin allCaps {
	font-weight: bold;
	text-transform: uppercase;
}

@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model; // Safari <= 5
		 -moz-box-sizing: $box-model; // Firefox <= 19
					box-sizing: $box-model;
}


@mixin shadow {
	box-shadow: 0 0px 20px 0px rgba(0, 0, 0, 0.1);
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}